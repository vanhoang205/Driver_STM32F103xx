
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006a8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007e4  080007e4  000107ec  2**0
                  CONTENTS
  4 .ARM          00000000  080007e4  080007e4  000107ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007e4  080007ec  000107ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007e4  080007e4  000107e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007e8  080007e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007ec  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002600  00000000  00000000  00010815  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000059d  00000000  00000000  00012e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000130  00000000  00000000  000133b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f8  00000000  00000000  000134e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000021e8  00000000  00000000  000135e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000141a  00000000  00000000  000157c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008e28  00000000  00000000  00016be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001fa0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000404  00000000  00000000  0001fa88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080007c0 	.word	0x080007c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080007c0 	.word	0x080007c0

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <SPI1_InitGPIO>:
 * PA6 --> MISO
 * PA7 --> MOSI
 * 2. Khoi tao SPI
 * 3. truyen du lieu moi 500ms
 */
void SPI1_InitGPIO() {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOForSPI;

	GPIOForSPI.pGPIO = GPIOA;
 8000186:	4b10      	ldr	r3, [pc, #64]	; (80001c8 <SPI1_InitGPIO+0x48>)
 8000188:	603b      	str	r3, [r7, #0]
	GPIOForSPI.pinConfig.pinMode = MODE_ALT_PUPU;
 800018a:	2306      	movs	r3, #6
 800018c:	717b      	strb	r3, [r7, #5]

	// config NSS
	GPIOForSPI.pinConfig.pinNumber = GPIO_PIN_4;
 800018e:	2304      	movs	r3, #4
 8000190:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIOForSPI);
 8000192:	463b      	mov	r3, r7
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f8cf 	bl	8000338 <GPIO_Init>

	// config SCLK
	GPIOForSPI.pinConfig.pinNumber = GPIO_PIN_5;
 800019a:	2305      	movs	r3, #5
 800019c:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIOForSPI);
 800019e:	463b      	mov	r3, r7
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f8c9 	bl	8000338 <GPIO_Init>

	// config MISO
	GPIOForSPI.pinConfig.pinNumber = GPIO_PIN_6;
 80001a6:	2306      	movs	r3, #6
 80001a8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIOForSPI);
 80001aa:	463b      	mov	r3, r7
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f8c3 	bl	8000338 <GPIO_Init>

	// config MOSI
	GPIOForSPI.pinConfig.pinNumber = GPIO_PIN_7;
 80001b2:	2307      	movs	r3, #7
 80001b4:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIOForSPI);
 80001b6:	463b      	mov	r3, r7
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 f8bd 	bl	8000338 <GPIO_Init>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40010800 	.word	0x40010800

080001cc <SPI1_Init>:

void SPI1_Init() {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
	SPI_Handle_t spi;
	spi.pSPI= SPI1;
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <SPI1_Init+0x3c>)
 80001d4:	607b      	str	r3, [r7, #4]
	spi.SPIConfig.baundRate = SPI_BAUND_PCLK_DIV2;
 80001d6:	2300      	movs	r3, #0
 80001d8:	72bb      	strb	r3, [r7, #10]
	spi.SPIConfig.clockPhase = SPI_PHASE_LEADING;
 80001da:	2300      	movs	r3, #0
 80001dc:	737b      	strb	r3, [r7, #13]
	spi.SPIConfig.clockPolarity = SPI_POL_HIGH;
 80001de:	2301      	movs	r3, #1
 80001e0:	733b      	strb	r3, [r7, #12]
	spi.SPIConfig.dataFrameFormat = SPI_DFF_8BIT;
 80001e2:	2300      	movs	r3, #0
 80001e4:	72fb      	strb	r3, [r7, #11]
	spi.SPIConfig.deviceType = SPI_DEVTYPE_MASTER;
 80001e6:	2301      	movs	r3, #1
 80001e8:	723b      	strb	r3, [r7, #8]
	spi.SPIConfig.remapName = SPI_REMAP_NONE;
 80001ea:	2300      	movs	r3, #0
 80001ec:	73fb      	strb	r3, [r7, #15]
	spi.SPIConfig.slaveSelectType = SPI_SSM_HARDWARE;
 80001ee:	2300      	movs	r3, #0
 80001f0:	73bb      	strb	r3, [r7, #14]
	spi.SPIConfig.transmitMode = SPI_TRANSMOD_FULLDUP;
 80001f2:	2300      	movs	r3, #0
 80001f4:	727b      	strb	r3, [r7, #9]
	SPI_Init(&spi);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fa45 	bl	8000688 <SPI_Init>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40013000 	.word	0x40013000

0800020c <main>:
int main() {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
	char user_data[] = "hello world";
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <main+0x30>)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	ca07      	ldmia	r2, {r0, r1, r2}
 8000218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SPI1_InitGPIO();
 800021c:	f7ff ffb0 	bl	8000180 <SPI1_InitGPIO>
	SPI1_Init();
 8000220:	f7ff ffd4 	bl	80001cc <SPI1_Init>
	SPI_TransmitData(SPI1, (uint8_t*)user_data, strlen(user_data));
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ffa2 	bl	8000170 <strlen>
 800022c:	4602      	mov	r2, r0
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4619      	mov	r1, r3
 8000232:	4803      	ldr	r0, [pc, #12]	; (8000240 <main+0x34>)
 8000234:	f000 fa6c 	bl	8000710 <SPI_TransmitData>



	while(1) {
 8000238:	e7fe      	b.n	8000238 <main+0x2c>
 800023a:	bf00      	nop
 800023c:	080007d8 	.word	0x080007d8
 8000240:	40013000 	.word	0x40013000

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024a:	490e      	ldr	r1, [pc, #56]	; (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 800024c:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <LoopForever+0xe>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0b      	ldr	r2, [pc, #44]	; (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000260:	4c0b      	ldr	r4, [pc, #44]	; (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800026e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 fa81 	bl	8000778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ffc9 	bl	800020c <main>

0800027a <LoopForever>:

LoopForever:
    b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	080007ec 	.word	0x080007ec
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC1_2_IRQHandler>
	...

08000298 <GPIO_PeriClockControl>:
#include "stm32f103xx.h"
#include "drv_gpio.h"


/* Control Peripheral clock */
void GPIO_PeriClockControl(GPIO_RegDef_t *pPort, uint8_t isEnabled) {
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	70fb      	strb	r3, [r7, #3]
	if (isEnabled == TRUE) {
 80002a4:	78fb      	ldrb	r3, [r7, #3]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d135      	bne.n	8000316 <GPIO_PeriClockControl+0x7e>
		if (pPort == GPIOA) {
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <GPIO_PeriClockControl+0x88>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6193      	str	r3, [r2, #24]
			GPIOE_PCLK_EN();
		}
	} else {
		// Do nothing
	}
}
 80002be:	e02a      	b.n	8000316 <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOB) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a19      	ldr	r2, [pc, #100]	; (8000328 <GPIO_PeriClockControl+0x90>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a15      	ldr	r2, [pc, #84]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6193      	str	r3, [r2, #24]
}
 80002d4:	e01f      	b.n	8000316 <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOC) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a14      	ldr	r2, [pc, #80]	; (800032c <GPIO_PeriClockControl+0x94>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a10      	ldr	r2, [pc, #64]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 80002e4:	f043 0310 	orr.w	r3, r3, #16
 80002e8:	6193      	str	r3, [r2, #24]
}
 80002ea:	e014      	b.n	8000316 <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOD) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a10      	ldr	r2, [pc, #64]	; (8000330 <GPIO_PeriClockControl+0x98>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002f4:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 80002fa:	f043 0320 	orr.w	r3, r3, #32
 80002fe:	6193      	str	r3, [r2, #24]
}
 8000300:	e009      	b.n	8000316 <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOE) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <GPIO_PeriClockControl+0x9c>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d105      	bne.n	8000316 <GPIO_PeriClockControl+0x7e>
			GPIOE_PCLK_EN();
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a05      	ldr	r2, [pc, #20]	; (8000324 <GPIO_PeriClockControl+0x8c>)
 8000310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000314:	6193      	str	r3, [r2, #24]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40010800 	.word	0x40010800
 8000324:	40021000 	.word	0x40021000
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40011000 	.word	0x40011000
 8000330:	40011400 	.word	0x40011400
 8000334:	40011800 	.word	0x40011800

08000338 <GPIO_Init>:

/* Initialization and Deinitialization Pin */
void GPIO_Init(GPIO_Handle_t *pPortHandle) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]

	// Configure mode, speed, output type and interrupt for pin
	uint32_t temp = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
	GPIO_PeriClockControl(pPortHandle->pGPIO, TRUE);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2101      	movs	r1, #1
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ffa4 	bl	8000298 <GPIO_PeriClockControl>
	if (pPortHandle->pinConfig.pinMode <= MODE_ALT_OPENDR) {		// not using interrupt
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	2b07      	cmp	r3, #7
 8000356:	d865      	bhi.n	8000424 <GPIO_Init+0xec>
		uint8_t temp1 = pPortHandle->pinConfig.pinNumber / 8;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	791b      	ldrb	r3, [r3, #4]
 800035c:	08db      	lsrs	r3, r3, #3
 800035e:	727b      	strb	r3, [r7, #9]
		uint8_t temp2 = pPortHandle->pinConfig.pinNumber % 8;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	791b      	ldrb	r3, [r3, #4]
 8000364:	f003 0307 	and.w	r3, r3, #7
 8000368:	723b      	strb	r3, [r7, #8]
		if (pPortHandle->pinConfig.pinMode <= MODE_INPUT_PUPDR) {
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	795b      	ldrb	r3, [r3, #5]
 800036e:	2b02      	cmp	r3, #2
 8000370:	d822      	bhi.n	80003b8 <GPIO_Init+0x80>
			// default choose input and analog mode function

			//choose analog mode or floating input or pull-up/pull down
			temp = pPortHandle->pGPIO->CR[temp1];
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	7a7a      	ldrb	r2, [r7, #9]
 8000378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800037c:	60fb      	str	r3, [r7, #12]
			temp &= ~(MASK_BIT2_3 << (4 * temp2));
 800037e:	7a3b      	ldrb	r3, [r7, #8]
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	220c      	movs	r2, #12
 8000384:	fa02 f303 	lsl.w	r3, r2, r3
 8000388:	43db      	mvns	r3, r3
 800038a:	461a      	mov	r2, r3
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	4013      	ands	r3, r2
 8000390:	60fb      	str	r3, [r7, #12]
			temp |= pPortHandle->pinConfig.pinMode << ((4 * temp2) + 2);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	795b      	ldrb	r3, [r3, #5]
 8000396:	461a      	mov	r2, r3
 8000398:	7a3b      	ldrb	r3, [r7, #8]
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	3302      	adds	r3, #2
 800039e:	fa02 f303 	lsl.w	r3, r2, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	4313      	orrs	r3, r2
 80003a8:	60fb      	str	r3, [r7, #12]
			pPortHandle->pGPIO->CR[temp1] = temp;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	7a7a      	ldrb	r2, [r7, #9]
 80003b0:	68f9      	ldr	r1, [r7, #12]
 80003b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80003b6:	e0d4      	b.n	8000562 <GPIO_Init+0x22a>
		} else {
			// choose output and alternative function mode
			// At the same time, choose speed output
			pPortHandle->pGPIO->CR[temp1] |= pPortHandle->pinConfig.pinSpeed << (4 * temp2);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	7a7a      	ldrb	r2, [r7, #9]
 80003be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	799b      	ldrb	r3, [r3, #6]
 80003c6:	461a      	mov	r2, r3
 80003c8:	7a3b      	ldrb	r3, [r7, #8]
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	7a7a      	ldrb	r2, [r7, #9]
 80003d8:	4301      	orrs	r1, r0
 80003da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			// choose alternative or output mode with open-drain/push pull capacity
			temp = pPortHandle->pGPIO->CR[temp1];
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	7a7a      	ldrb	r2, [r7, #9]
 80003e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003e8:	60fb      	str	r3, [r7, #12]
			temp &= ~(MASK_BIT2_3 << (4 * temp2));
 80003ea:	7a3b      	ldrb	r3, [r7, #8]
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	220c      	movs	r2, #12
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	4013      	ands	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
			temp |= ((pPortHandle->pinConfig.pinMode - 4) << ((4 * temp2) + 2));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	795b      	ldrb	r3, [r3, #5]
 8000402:	1f1a      	subs	r2, r3, #4
 8000404:	7a3b      	ldrb	r3, [r7, #8]
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	3302      	adds	r3, #2
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	461a      	mov	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	4313      	orrs	r3, r2
 8000414:	60fb      	str	r3, [r7, #12]
			pPortHandle->pGPIO->CR[temp1] = temp;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	7a7a      	ldrb	r2, [r7, #9]
 800041c:	68f9      	ldr	r1, [r7, #12]
 800041e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000422:	e09e      	b.n	8000562 <GPIO_Init+0x22a>
		}
	} else {	// using interrupt
		uint8_t temp1 = pPortHandle->pinConfig.pinNumber / 4;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	089b      	lsrs	r3, r3, #2
 800042a:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pPortHandle->pinConfig.pinNumber % 4;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	f003 0303 	and.w	r3, r3, #3
 8000434:	72bb      	strb	r3, [r7, #10]
		if (pPortHandle->pinConfig.pinMode == MODE_IT_FALL_EDGE) {
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	795b      	ldrb	r3, [r3, #5]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d117      	bne.n	800046e <GPIO_Init+0x136>
			// configure the FTSR
			EXTI->FTSR |= 1 << pPortHandle->pinConfig.pinNumber;
 800043e:	4b55      	ldr	r3, [pc, #340]	; (8000594 <GPIO_Init+0x25c>)
 8000440:	68db      	ldr	r3, [r3, #12]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7912      	ldrb	r2, [r2, #4]
 8000446:	4611      	mov	r1, r2
 8000448:	2201      	movs	r2, #1
 800044a:	408a      	lsls	r2, r1
 800044c:	4611      	mov	r1, r2
 800044e:	4a51      	ldr	r2, [pc, #324]	; (8000594 <GPIO_Init+0x25c>)
 8000450:	430b      	orrs	r3, r1
 8000452:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pPortHandle->pinConfig.pinNumber);
 8000454:	4b4f      	ldr	r3, [pc, #316]	; (8000594 <GPIO_Init+0x25c>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7912      	ldrb	r2, [r2, #4]
 800045c:	4611      	mov	r1, r2
 800045e:	2201      	movs	r2, #1
 8000460:	408a      	lsls	r2, r1
 8000462:	43d2      	mvns	r2, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a4b      	ldr	r2, [pc, #300]	; (8000594 <GPIO_Init+0x25c>)
 8000468:	400b      	ands	r3, r1
 800046a:	6093      	str	r3, [r2, #8]
 800046c:	e035      	b.n	80004da <GPIO_Init+0x1a2>
		} else if (pPortHandle->pinConfig.pinMode == MODE_IT_RISE_EDGE) {
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	795b      	ldrb	r3, [r3, #5]
 8000472:	2b08      	cmp	r3, #8
 8000474:	d117      	bne.n	80004a6 <GPIO_Init+0x16e>
			EXTI->RTSR |= 1 << pPortHandle->pinConfig.pinNumber;
 8000476:	4b47      	ldr	r3, [pc, #284]	; (8000594 <GPIO_Init+0x25c>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	7912      	ldrb	r2, [r2, #4]
 800047e:	4611      	mov	r1, r2
 8000480:	2201      	movs	r2, #1
 8000482:	408a      	lsls	r2, r1
 8000484:	4611      	mov	r1, r2
 8000486:	4a43      	ldr	r2, [pc, #268]	; (8000594 <GPIO_Init+0x25c>)
 8000488:	430b      	orrs	r3, r1
 800048a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pPortHandle->pinConfig.pinNumber);
 800048c:	4b41      	ldr	r3, [pc, #260]	; (8000594 <GPIO_Init+0x25c>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	7912      	ldrb	r2, [r2, #4]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	43d2      	mvns	r2, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a3d      	ldr	r2, [pc, #244]	; (8000594 <GPIO_Init+0x25c>)
 80004a0:	400b      	ands	r3, r1
 80004a2:	60d3      	str	r3, [r2, #12]
 80004a4:	e019      	b.n	80004da <GPIO_Init+0x1a2>
		} else if (pPortHandle->pinConfig.pinMode == MODE_IT_RISE_FALL_EDGE) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	795b      	ldrb	r3, [r3, #5]
 80004aa:	2b0a      	cmp	r3, #10
 80004ac:	d115      	bne.n	80004da <GPIO_Init+0x1a2>
			EXTI->FTSR |= 1 << pPortHandle->pinConfig.pinNumber;
 80004ae:	4b39      	ldr	r3, [pc, #228]	; (8000594 <GPIO_Init+0x25c>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	4611      	mov	r1, r2
 80004be:	4a35      	ldr	r2, [pc, #212]	; (8000594 <GPIO_Init+0x25c>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= 1 << pPortHandle->pinConfig.pinNumber;
 80004c4:	4b33      	ldr	r3, [pc, #204]	; (8000594 <GPIO_Init+0x25c>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	7912      	ldrb	r2, [r2, #4]
 80004cc:	4611      	mov	r1, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	408a      	lsls	r2, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a2f      	ldr	r2, [pc, #188]	; (8000594 <GPIO_Init+0x25c>)
 80004d6:	430b      	orrs	r3, r1
 80004d8:	6093      	str	r3, [r2, #8]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTIR
		AFIO_PCLK_EN();
 80004da:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <GPIO_Init+0x260>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a2e      	ldr	r2, [pc, #184]	; (8000598 <GPIO_Init+0x260>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6193      	str	r3, [r2, #24]
		AFIO->EXTICR[temp1] |= DECODE_PORT_EXTI(pPortHandle->pGPIO) << (4 * temp2);
 80004e6:	4a2d      	ldr	r2, [pc, #180]	; (800059c <GPIO_Init+0x264>)
 80004e8:	7afb      	ldrb	r3, [r7, #11]
 80004ea:	3302      	adds	r3, #2
 80004ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	492a      	ldr	r1, [pc, #168]	; (80005a0 <GPIO_Init+0x268>)
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d01d      	beq.n	8000536 <GPIO_Init+0x1fe>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4929      	ldr	r1, [pc, #164]	; (80005a4 <GPIO_Init+0x26c>)
 8000500:	428b      	cmp	r3, r1
 8000502:	d016      	beq.n	8000532 <GPIO_Init+0x1fa>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4927      	ldr	r1, [pc, #156]	; (80005a8 <GPIO_Init+0x270>)
 800050a:	428b      	cmp	r3, r1
 800050c:	d00f      	beq.n	800052e <GPIO_Init+0x1f6>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4926      	ldr	r1, [pc, #152]	; (80005ac <GPIO_Init+0x274>)
 8000514:	428b      	cmp	r3, r1
 8000516:	d008      	beq.n	800052a <GPIO_Init+0x1f2>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4924      	ldr	r1, [pc, #144]	; (80005b0 <GPIO_Init+0x278>)
 800051e:	428b      	cmp	r3, r1
 8000520:	d101      	bne.n	8000526 <GPIO_Init+0x1ee>
 8000522:	2304      	movs	r3, #4
 8000524:	e008      	b.n	8000538 <GPIO_Init+0x200>
 8000526:	2300      	movs	r3, #0
 8000528:	e006      	b.n	8000538 <GPIO_Init+0x200>
 800052a:	2303      	movs	r3, #3
 800052c:	e004      	b.n	8000538 <GPIO_Init+0x200>
 800052e:	2302      	movs	r3, #2
 8000530:	e002      	b.n	8000538 <GPIO_Init+0x200>
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <GPIO_Init+0x200>
 8000536:	2300      	movs	r3, #0
 8000538:	7ab9      	ldrb	r1, [r7, #10]
 800053a:	0089      	lsls	r1, r1, #2
 800053c:	408b      	lsls	r3, r1
 800053e:	4618      	mov	r0, r3
 8000540:	4916      	ldr	r1, [pc, #88]	; (800059c <GPIO_Init+0x264>)
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	4302      	orrs	r2, r0
 8000546:	3302      	adds	r3, #2
 8000548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pPortHandle->pinConfig.pinNumber;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <GPIO_Init+0x25c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	7912      	ldrb	r2, [r2, #4]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	4611      	mov	r1, r2
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <GPIO_Init+0x25c>)
 800055e:	430b      	orrs	r3, r1
 8000560:	6013      	str	r3, [r2, #0]
	}

	// configure the pull/pull down resistor
	temp = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
	if (pPortHandle->pinConfig.pinMode != MODE_INPUT_FLOAT) {
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	795b      	ldrb	r3, [r3, #5]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d00e      	beq.n	800058c <GPIO_Init+0x254>
		pPortHandle->pGPIO->ODR |= (pPortHandle->pinConfig.pinResType << pPortHandle->pinConfig.pinNumber);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	79db      	ldrb	r3, [r3, #7]
 8000578:	4619      	mov	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	430a      	orrs	r2, r1
 800058a:	60da      	str	r2, [r3, #12]
	}
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40010400 	.word	0x40010400
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000
 80005a0:	40010800 	.word	0x40010800
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	40011000 	.word	0x40011000
 80005ac:	40011400 	.word	0x40011400
 80005b0:	40011800 	.word	0x40011800

080005b4 <SPI_Remap>:
#include "stm32f103xx.h"
#include "drv_spi.h"


void SPI_Remap(SPI_Handle_t *spi) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if (spi->SPIConfig.remapName == SPI_REMAP_NONE) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7adb      	ldrb	r3, [r3, #11]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d106      	bne.n	80005d2 <SPI_Remap+0x1e>
		AFIO->MAPR &= ~(1 << SPI_MAPR_SPI1REMAP_BIT);
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <SPI_Remap+0x3c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <SPI_Remap+0x3c>)
 80005ca:	f023 0301 	bic.w	r3, r3, #1
 80005ce:	6053      	str	r3, [r2, #4]
	} else if (spi->SPIConfig.remapName == SPI_REMAP_SPI1) {
		AFIO->MAPR |= (1 << SPI_MAPR_SPI1REMAP_BIT);
	}
}
 80005d0:	e009      	b.n	80005e6 <SPI_Remap+0x32>
	} else if (spi->SPIConfig.remapName == SPI_REMAP_SPI1) {
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7adb      	ldrb	r3, [r3, #11]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d105      	bne.n	80005e6 <SPI_Remap+0x32>
		AFIO->MAPR |= (1 << SPI_MAPR_SPI1REMAP_BIT);
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <SPI_Remap+0x3c>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <SPI_Remap+0x3c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6053      	str	r3, [r2, #4]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40010000 	.word	0x40010000

080005f4 <GetFlagStatus>:

uint8_t GetFlagStatus(SPI_RegDef_t *pSPI, uint8_t flagType) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
	if (pSPI->SR & flagType) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	4013      	ands	r3, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <GetFlagStatus+0x1c>
		return SPI_FLAG_SET;
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <GetFlagStatus+0x1e>
	}
	return SPI_FLAG_RESET;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <SPI_PeriClockControl>:
/* Control Peripheral clock */
void SPI_PeriClockControl(SPI_RegDef_t *pSPI, uint8_t isEnabled) {
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	if (isEnabled == TRUE) {
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d11f      	bne.n	800066e <SPI_PeriClockControl+0x52>
		if (pSPI == SPI1) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a11      	ldr	r2, [pc, #68]	; (8000678 <SPI_PeriClockControl+0x5c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <SPI_PeriClockControl+0x60>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <SPI_PeriClockControl+0x60>)
 800063c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000640:	6193      	str	r3, [r2, #24]
			SPI3_PCLK_EN();
		}
	} else {
		// Do nothing
	}
}
 8000642:	e014      	b.n	800066e <SPI_PeriClockControl+0x52>
		} else if (pSPI == SPI2) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <SPI_PeriClockControl+0x64>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <SPI_PeriClockControl+0x60>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <SPI_PeriClockControl+0x60>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	61d3      	str	r3, [r2, #28]
}
 8000658:	e009      	b.n	800066e <SPI_PeriClockControl+0x52>
		} else if (pSPI == SPI3) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <SPI_PeriClockControl+0x68>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d105      	bne.n	800066e <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <SPI_PeriClockControl+0x60>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <SPI_PeriClockControl+0x60>)
 8000668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066c:	61d3      	str	r3, [r2, #28]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40013000 	.word	0x40013000
 800067c:	40021000 	.word	0x40021000
 8000680:	40003800 	.word	0x40003800
 8000684:	40003c00 	.word	0x40003c00

08000688 <SPI_Init>:

/* Initialization and Deinitialization Pin */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	uint32_t tempReg = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPI, TRUE);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ffbe 	bl	800061c <SPI_PeriClockControl>
	// configure device type
	tempReg |= pSPIHandle->SPIConfig.deviceType << SPI_CR1_MSTR_BIT;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	461a      	mov	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]

	// thiet lap ssm
	tempReg |= pSPIHandle->SPIConfig.slaveSelectType << SPI_CR1_SSM_BIT;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7a9b      	ldrb	r3, [r3, #10]
 80006b2:	025b      	lsls	r3, r3, #9
 80006b4:	461a      	mov	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]

	// thiet lap baund rate
	tempReg |= pSPIHandle->SPIConfig.baundRate << SPI_CR1_BR0_BIT;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	799b      	ldrb	r3, [r3, #6]
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]

	// thiet lap dataframe
	tempReg |= pSPIHandle->SPIConfig.dataFrameFormat << SPI_CR1_DFF_BIT;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	79db      	ldrb	r3, [r3, #7]
 80006ce:	02db      	lsls	r3, r3, #11
 80006d0:	461a      	mov	r2, r3
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]

	// thiet lap transmission format
	// note: defaule mode is transmit mode full duplex
	if (pSPIHandle->SPIConfig.transmitMode == SPI_TRANSMOD_HALFDUP) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d104      	bne.n	80006ea <SPI_Init+0x62>
		tempReg |= (1 << SPI_CR1_BIDIMODE_BIT);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e007      	b.n	80006fa <SPI_Init+0x72>
	} else if (pSPIHandle->SPIConfig.transmitMode == SPI_TRANSMOD_HALFDUP) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	795b      	ldrb	r3, [r3, #5]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d103      	bne.n	80006fa <SPI_Init+0x72>
		tempReg |= (1 << SPI_CR1_RXONLY_BIT);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006f8:	60fb      	str	r3, [r7, #12]
	}
	pSPIHandle->pSPI->CR[0] = tempReg;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	601a      	str	r2, [r3, #0]
	SPI_Remap(pSPIHandle);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff56 	bl	80005b4 <SPI_Remap>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <SPI_TransmitData>:
}

/*
 * Data transmit and receive
 */
void SPI_TransmitData(SPI_RegDef_t *pSPI, uint8_t *pTxBuffer, uint32_t len) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
	while (len) {
 800071c:	e024      	b.n	8000768 <SPI_TransmitData+0x58>
		while (GetFlagStatus(pSPI, SPI_SR_TXE_BIT) == SPI_FLAG_RESET);
 800071e:	bf00      	nop
 8000720:	2101      	movs	r1, #1
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f7ff ff66 	bl	80005f4 <GetFlagStatus>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0f8      	beq.n	8000720 <SPI_TransmitData+0x10>

		if (pSPI->CR[0] & (1 << SPI_CR1_DFF_BIT)) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00b      	beq.n	8000752 <SPI_TransmitData+0x42>
			pSPI->DR = *((uint16_t*)(pTxBuffer));
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	60da      	str	r2, [r3, #12]
			len -= 2;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b02      	subs	r3, #2
 8000748:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	e00a      	b.n	8000768 <SPI_TransmitData+0x58>
		} else {
			pSPI->DR = *pTxBuffer;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	60da      	str	r2, [r3, #12]
			len--;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	3301      	adds	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
	while (len) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1d7      	bne.n	800071e <SPI_TransmitData+0xe>
		}
	}
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <__libc_init_array>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	2500      	movs	r5, #0
 800077c:	4e0c      	ldr	r6, [pc, #48]	; (80007b0 <__libc_init_array+0x38>)
 800077e:	4c0d      	ldr	r4, [pc, #52]	; (80007b4 <__libc_init_array+0x3c>)
 8000780:	1ba4      	subs	r4, r4, r6
 8000782:	10a4      	asrs	r4, r4, #2
 8000784:	42a5      	cmp	r5, r4
 8000786:	d109      	bne.n	800079c <__libc_init_array+0x24>
 8000788:	f000 f81a 	bl	80007c0 <_init>
 800078c:	2500      	movs	r5, #0
 800078e:	4e0a      	ldr	r6, [pc, #40]	; (80007b8 <__libc_init_array+0x40>)
 8000790:	4c0a      	ldr	r4, [pc, #40]	; (80007bc <__libc_init_array+0x44>)
 8000792:	1ba4      	subs	r4, r4, r6
 8000794:	10a4      	asrs	r4, r4, #2
 8000796:	42a5      	cmp	r5, r4
 8000798:	d105      	bne.n	80007a6 <__libc_init_array+0x2e>
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007a0:	4798      	blx	r3
 80007a2:	3501      	adds	r5, #1
 80007a4:	e7ee      	b.n	8000784 <__libc_init_array+0xc>
 80007a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007aa:	4798      	blx	r3
 80007ac:	3501      	adds	r5, #1
 80007ae:	e7f2      	b.n	8000796 <__libc_init_array+0x1e>
 80007b0:	080007e4 	.word	0x080007e4
 80007b4:	080007e4 	.word	0x080007e4
 80007b8:	080007e4 	.word	0x080007e4
 80007bc:	080007e8 	.word	0x080007e8

080007c0 <_init>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	bf00      	nop
 80007c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c6:	bc08      	pop	{r3}
 80007c8:	469e      	mov	lr, r3
 80007ca:	4770      	bx	lr

080007cc <_fini>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	bf00      	nop
 80007d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d2:	bc08      	pop	{r3}
 80007d4:	469e      	mov	lr, r3
 80007d6:	4770      	bx	lr
