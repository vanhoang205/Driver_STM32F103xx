
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f0  080004f8  000104f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f0  080004f0  000104f8  2**0
                  CONTENTS
  4 .ARM          00000000  080004f0  080004f0  000104f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f0  080004f8  000104f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f0  080004f0  000104f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004f4  080004f4  000104f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004f8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017d0  00000000  00000000  00010521  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000037b  00000000  00000000  00011cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  00012070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  00012128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001de6  00000000  00000000  000121b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000cde  00000000  00000000  00013f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008636  00000000  00000000  00014c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001d2b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  0001d330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004d8 	.word	0x080004d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004d8 	.word	0x080004d8

08000170 <delay>:
#endif

#include "stm32f103xx.h"
#include "drv_gpio.h"

void delay() {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for (int i = 0; i < 500000/6 ; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <delay+0x24>)
 8000186:	4293      	cmp	r3, r2
 8000188:	ddf8      	ble.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	00014584 	.word	0x00014584

08000198 <main>:
int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioLed;
	GPIO_Handle_t gpioButton;

	(RCC->APB2ENR |= (1 << 0));
 800019e:	4b22      	ldr	r3, [pc, #136]	; (8000228 <main+0x90>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a21      	ldr	r2, [pc, #132]	; (8000228 <main+0x90>)
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= (1 << 25);
 80001aa:	4b20      	ldr	r3, [pc, #128]	; (800022c <main+0x94>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	4a1f      	ldr	r2, [pc, #124]	; (800022c <main+0x94>)
 80001b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001b4:	6053      	str	r3, [r2, #4]

	gpioLed.pGPIO = GPIOB;
 80001b6:	4b1e      	ldr	r3, [pc, #120]	; (8000230 <main+0x98>)
 80001b8:	60fb      	str	r3, [r7, #12]
	gpioLed.pinConfig.pinMode = MODE_OUTPUT_OPENDR;
 80001ba:	2305      	movs	r3, #5
 80001bc:	747b      	strb	r3, [r7, #17]
	gpioLed.pinConfig.pinSpeed = OUTPUT_SPEED_2Mhz;
 80001be:	2302      	movs	r3, #2
 80001c0:	74bb      	strb	r3, [r7, #18]
	gpioLed.pinConfig.pinNumber = GPIO_PIN_4;
 80001c2:	2304      	movs	r3, #4
 80001c4:	743b      	strb	r3, [r7, #16]

	gpioButton.pGPIO = GPIOA;
 80001c6:	4b1b      	ldr	r3, [pc, #108]	; (8000234 <main+0x9c>)
 80001c8:	603b      	str	r3, [r7, #0]
	gpioButton.pinConfig.pinMode = MODE_INPUT_PUPDR;
 80001ca:	2302      	movs	r3, #2
 80001cc:	717b      	strb	r3, [r7, #5]
	gpioButton.pinConfig.pinNumber = GPIO_PIN_2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	713b      	strb	r3, [r7, #4]
	gpioButton.pinConfig.pinResType = INPUT_PULLUP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, TRUE);
 80001d6:	2101      	movs	r1, #1
 80001d8:	4816      	ldr	r0, [pc, #88]	; (8000234 <main+0x9c>)
 80001da:	f000 f857 	bl	800028c <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOB, TRUE);
 80001de:	2101      	movs	r1, #1
 80001e0:	4813      	ldr	r0, [pc, #76]	; (8000230 <main+0x98>)
 80001e2:	f000 f853 	bl	800028c <GPIO_PeriClockControl>

	GPIO_Init(&gpioLed);
 80001e6:	f107 030c 	add.w	r3, r7, #12
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f89e 	bl	800032c <GPIO_Init>
	GPIO_Init(&gpioButton);
 80001f0:	463b      	mov	r3, r7
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f89a 	bl	800032c <GPIO_Init>
	while (1) {
		if (!GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {
 80001f8:	2102      	movs	r1, #2
 80001fa:	480e      	ldr	r0, [pc, #56]	; (8000234 <main+0x9c>)
 80001fc:	f000 f91f 	bl	800043e <GPIO_ReadPin>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f8      	bne.n	80001f8 <main+0x60>
			delay();
 8000206:	f7ff ffb3 	bl	8000170 <delay>
			GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800020a:	2104      	movs	r1, #4
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x98>)
 800020e:	f000 f92b 	bl	8000468 <GPIO_TogglePin>
			while (!GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {
 8000212:	e001      	b.n	8000218 <main+0x80>
				delay();
 8000214:	f7ff ffac 	bl	8000170 <delay>
			while (!GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {
 8000218:	2102      	movs	r1, #2
 800021a:	4806      	ldr	r0, [pc, #24]	; (8000234 <main+0x9c>)
 800021c:	f000 f90f 	bl	800043e <GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0f6      	beq.n	8000214 <main+0x7c>
		if (!GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {
 8000226:	e7e7      	b.n	80001f8 <main+0x60>
 8000228:	40021000 	.word	0x40021000
 800022c:	40010000 	.word	0x40010000
 8000230:	40010c00 	.word	0x40010c00
 8000234:	40010800 	.word	0x40010800

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 800023e:	490e      	ldr	r1, [pc, #56]	; (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <LoopForever+0xe>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000244:	e002      	b.n	800024c <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024a:	3304      	adds	r3, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800024c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000250:	d3f9      	bcc.n	8000246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000254:	4c0b      	ldr	r4, [pc, #44]	; (8000284 <LoopForever+0x16>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000258:	e001      	b.n	800025e <LoopFillZerobss>

0800025a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025c:	3204      	adds	r2, #4

0800025e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000260:	d3fb      	bcc.n	800025a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000262:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f913 	bl	8000490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ff95 	bl	8000198 <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800027c:	080004f8 	.word	0x080004f8
  ldr r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000284:	2000001c 	.word	0x2000001c

08000288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC1_2_IRQHandler>
	...

0800028c <GPIO_PeriClockControl>:
#include "stm32f103xx.h"
#include "drv_gpio.h"


/* Control Peripheral clock */
void GPIO_PeriClockControl(GPIO_RegDef_t *pPort, uint8_t isEnabled) {
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	70fb      	strb	r3, [r7, #3]
	if (isEnabled == TRUE) {
 8000298:	78fb      	ldrb	r3, [r7, #3]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d135      	bne.n	800030a <GPIO_PeriClockControl+0x7e>
		if (pPort == GPIOA) {
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a1c      	ldr	r2, [pc, #112]	; (8000314 <GPIO_PeriClockControl+0x88>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002a6:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a1b      	ldr	r2, [pc, #108]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6193      	str	r3, [r2, #24]
			GPIOE_PCLK_EN();
		}
	} else {
		// Do nothing
	}
}
 80002b2:	e02a      	b.n	800030a <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOB) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a19      	ldr	r2, [pc, #100]	; (800031c <GPIO_PeriClockControl+0x90>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
}
 80002c8:	e01f      	b.n	800030a <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOC) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <GPIO_PeriClockControl+0x94>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a10      	ldr	r2, [pc, #64]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 80002d8:	f043 0310 	orr.w	r3, r3, #16
 80002dc:	6193      	str	r3, [r2, #24]
}
 80002de:	e014      	b.n	800030a <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOD) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a10      	ldr	r2, [pc, #64]	; (8000324 <GPIO_PeriClockControl+0x98>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6193      	str	r3, [r2, #24]
}
 80002f4:	e009      	b.n	800030a <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOE) {
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <GPIO_PeriClockControl+0x9c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d105      	bne.n	800030a <GPIO_PeriClockControl+0x7e>
			GPIOE_PCLK_EN();
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a05      	ldr	r2, [pc, #20]	; (8000318 <GPIO_PeriClockControl+0x8c>)
 8000304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000308:	6193      	str	r3, [r2, #24]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40010800 	.word	0x40010800
 8000318:	40021000 	.word	0x40021000
 800031c:	40010c00 	.word	0x40010c00
 8000320:	40011000 	.word	0x40011000
 8000324:	40011400 	.word	0x40011400
 8000328:	40011800 	.word	0x40011800

0800032c <GPIO_Init>:

/* Initialization and Deinitialization Pin */
void GPIO_Init(GPIO_Handle_t *pPortHandle) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]

	// Configure mode, speed, output type and interrupt for pin
	uint32_t temp = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
	uint8_t temp1 = pPortHandle->pinConfig.pinNumber / 8;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	08db      	lsrs	r3, r3, #3
 800033e:	72fb      	strb	r3, [r7, #11]
	uint8_t temp2 = pPortHandle->pinConfig.pinNumber % 8;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	791b      	ldrb	r3, [r3, #4]
 8000344:	f003 0307 	and.w	r3, r3, #7
 8000348:	72bb      	strb	r3, [r7, #10]
	if (pPortHandle->pinConfig.pinMode <= MODE_ALT_OPENDR) {	// not using interrupt
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	795b      	ldrb	r3, [r3, #5]
 800034e:	2b07      	cmp	r3, #7
 8000350:	d85b      	bhi.n	800040a <GPIO_Init+0xde>
		if (pPortHandle->pinConfig.pinMode <= MODE_INPUT_PUPDR) {
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	795b      	ldrb	r3, [r3, #5]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d822      	bhi.n	80003a0 <GPIO_Init+0x74>
			// default choose input and analog mode function

			//choose analog mode or floating input or pull-up/pull down
			temp = pPortHandle->pGPIO->CR[temp1];
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	7afa      	ldrb	r2, [r7, #11]
 8000360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000364:	60fb      	str	r3, [r7, #12]
			temp &= ~(MASK_BIT2_3 << (4 * temp2));
 8000366:	7abb      	ldrb	r3, [r7, #10]
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	220c      	movs	r2, #12
 800036c:	fa02 f303 	lsl.w	r3, r2, r3
 8000370:	43db      	mvns	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	4013      	ands	r3, r2
 8000378:	60fb      	str	r3, [r7, #12]
			temp |= pPortHandle->pinConfig.pinMode << ((4 * temp2) + 2);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	795b      	ldrb	r3, [r3, #5]
 800037e:	461a      	mov	r2, r3
 8000380:	7abb      	ldrb	r3, [r7, #10]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	3302      	adds	r3, #2
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	461a      	mov	r2, r3
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	4313      	orrs	r3, r2
 8000390:	60fb      	str	r3, [r7, #12]
			pPortHandle->pGPIO->CR[temp1] = temp;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	7afa      	ldrb	r2, [r7, #11]
 8000398:	68f9      	ldr	r1, [r7, #12]
 800039a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800039e:	e034      	b.n	800040a <GPIO_Init+0xde>
		} else {
			// choose output and alternative function mode
			// At the same time, choose speed output
			pPortHandle->pGPIO->CR[temp1] |= pPortHandle->pinConfig.pinSpeed << (4 * temp2);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	7afa      	ldrb	r2, [r7, #11]
 80003a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	799b      	ldrb	r3, [r3, #6]
 80003ae:	461a      	mov	r2, r3
 80003b0:	7abb      	ldrb	r3, [r7, #10]
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	fa02 f303 	lsl.w	r3, r2, r3
 80003b8:	4618      	mov	r0, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	7afa      	ldrb	r2, [r7, #11]
 80003c0:	4301      	orrs	r1, r0
 80003c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			// choose alternative or output mode with open-drain/push pull capacity
			temp = pPortHandle->pGPIO->CR[temp1];
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	7afa      	ldrb	r2, [r7, #11]
 80003cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d0:	60fb      	str	r3, [r7, #12]
			temp &= ~(MASK_BIT2_3 << (4 * temp2));
 80003d2:	7abb      	ldrb	r3, [r7, #10]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	220c      	movs	r2, #12
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	43db      	mvns	r3, r3
 80003de:	461a      	mov	r2, r3
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	4013      	ands	r3, r2
 80003e4:	60fb      	str	r3, [r7, #12]
			temp |= ((pPortHandle->pinConfig.pinMode - 4) << ((4 * temp2) + 2));
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	795b      	ldrb	r3, [r3, #5]
 80003ea:	1f1a      	subs	r2, r3, #4
 80003ec:	7abb      	ldrb	r3, [r7, #10]
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	3302      	adds	r3, #2
 80003f2:	fa02 f303 	lsl.w	r3, r2, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
			pPortHandle->pGPIO->CR[temp1] = temp;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	7afa      	ldrb	r2, [r7, #11]
 8000404:	68f9      	ldr	r1, [r7, #12]
 8000406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {	// using interrupt

	}

	// configure the pull/pull down resistor
	temp = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
	if (pPortHandle->pinConfig.pinMode != MODE_INPUT_FLOAT) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	795b      	ldrb	r3, [r3, #5]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d00e      	beq.n	8000434 <GPIO_Init+0x108>
		pPortHandle->pGPIO->ODR |= (pPortHandle->pinConfig.pinResType << pPortHandle->pinConfig.pinNumber);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	68da      	ldr	r2, [r3, #12]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	79db      	ldrb	r3, [r3, #7]
 8000420:	4619      	mov	r1, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	4619      	mov	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	430a      	orrs	r2, r1
 8000432:	60da      	str	r2, [r3, #12]
	}
}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr

0800043e <GPIO_ReadPin>:
		GPIOE_REG_RESET();
	}
}

/* Read and Write data */
uint8_t GPIO_ReadPin(GPIO_RegDef_t *pPort, uint8_t pinNum) {
 800043e:	b480      	push	{r7}
 8000440:	b085      	sub	sp, #20
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	460b      	mov	r3, r1
 8000448:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pPort->IDR >> pinNum) & 0x00000001);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	78fb      	ldrb	r3, [r7, #3]
 8000450:	fa22 f303 	lsr.w	r3, r2, r3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	73fb      	strb	r3, [r7, #15]
	return value;
 800045c:	7bfb      	ldrb	r3, [r7, #15]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <GPIO_TogglePin>:

void GPIO_WritePort(GPIO_RegDef_t *pPort, uint16_t value) {
	pPort->ODR = value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pPort, uint8_t pinNum) {
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
	pPort->ODR ^= (1 << pinNum);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	78fa      	ldrb	r2, [r7, #3]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	405a      	eors	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	60da      	str	r2, [r3, #12]
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <__libc_init_array>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	2500      	movs	r5, #0
 8000494:	4e0c      	ldr	r6, [pc, #48]	; (80004c8 <__libc_init_array+0x38>)
 8000496:	4c0d      	ldr	r4, [pc, #52]	; (80004cc <__libc_init_array+0x3c>)
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	10a4      	asrs	r4, r4, #2
 800049c:	42a5      	cmp	r5, r4
 800049e:	d109      	bne.n	80004b4 <__libc_init_array+0x24>
 80004a0:	f000 f81a 	bl	80004d8 <_init>
 80004a4:	2500      	movs	r5, #0
 80004a6:	4e0a      	ldr	r6, [pc, #40]	; (80004d0 <__libc_init_array+0x40>)
 80004a8:	4c0a      	ldr	r4, [pc, #40]	; (80004d4 <__libc_init_array+0x44>)
 80004aa:	1ba4      	subs	r4, r4, r6
 80004ac:	10a4      	asrs	r4, r4, #2
 80004ae:	42a5      	cmp	r5, r4
 80004b0:	d105      	bne.n	80004be <__libc_init_array+0x2e>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004b8:	4798      	blx	r3
 80004ba:	3501      	adds	r5, #1
 80004bc:	e7ee      	b.n	800049c <__libc_init_array+0xc>
 80004be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004c2:	4798      	blx	r3
 80004c4:	3501      	adds	r5, #1
 80004c6:	e7f2      	b.n	80004ae <__libc_init_array+0x1e>
 80004c8:	080004f0 	.word	0x080004f0
 80004cc:	080004f0 	.word	0x080004f0
 80004d0:	080004f0 	.word	0x080004f0
 80004d4:	080004f4 	.word	0x080004f4

080004d8 <_init>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	bf00      	nop
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr

080004e4 <_fini>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	bf00      	nop
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr
