
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d0  080004d8  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d0  080004d0  000104d8  2**0
                  CONTENTS
  4 .ARM          00000000  080004d0  080004d0  000104d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d0  080004d8  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004d8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017c2  00000000  00000000  00010501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000037b  00000000  00000000  00011cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  00012040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  000120f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001de6  00000000  00000000  00012188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000cd4  00000000  00000000  00013f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000861e  00000000  00000000  00014c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001d260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  0001d2dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004b8 	.word	0x080004b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004b8 	.word	0x080004b8

08000170 <delay>:
#endif

#include "stm32f103xx.h"
#include "drv_gpio.h"

void delay() {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for (int i = 0; i < 500000; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <delay+0x24>)
 8000186:	4293      	cmp	r3, r2
 8000188:	ddf8      	ble.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	0007a11f 	.word	0x0007a11f

08000198 <main>:
int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioLed;

	(RCC->APB2ENR |= (1 << 0));
 800019e:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <main+0x58>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a13      	ldr	r2, [pc, #76]	; (80001f0 <main+0x58>)
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= (1 << 25);
 80001aa:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <main+0x5c>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <main+0x5c>)
 80001b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001b4:	6053      	str	r3, [r2, #4]

	gpioLed.pGPIO = GPIOB;
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <main+0x60>)
 80001b8:	607b      	str	r3, [r7, #4]
	gpioLed.pinConfig.pinMode = MODE_OUTPUT_PUPU;
 80001ba:	2304      	movs	r3, #4
 80001bc:	727b      	strb	r3, [r7, #9]
	gpioLed.pinConfig.pinSpeed = OUTPUT_SPEED_2Mhz;
 80001be:	2302      	movs	r3, #2
 80001c0:	72bb      	strb	r3, [r7, #10]
	gpioLed.pinConfig.pinNumber = GPIO_PIN_4;
 80001c2:	2304      	movs	r3, #4
 80001c4:	723b      	strb	r3, [r7, #8]
	GPIO_PeriClockControl(GPIOB, TRUE);
 80001c6:	2101      	movs	r1, #1
 80001c8:	480b      	ldr	r0, [pc, #44]	; (80001f8 <main+0x60>)
 80001ca:	f000 f841 	bl	8000250 <GPIO_PeriClockControl>
	GPIO_WritePin(GPIOB, GPIO_PIN_4, LOW);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2104      	movs	r1, #4
 80001d2:	4809      	ldr	r0, [pc, #36]	; (80001f8 <main+0x60>)
 80001d4:	f000 f913 	bl	80003fe <GPIO_WritePin>
	GPIO_Init(&gpioLed);
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 f888 	bl	80002f0 <GPIO_Init>
	while (1) {
		GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80001e0:	2104      	movs	r1, #4
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <main+0x60>)
 80001e4:	f000 f92f 	bl	8000446 <GPIO_TogglePin>
		delay();
 80001e8:	f7ff ffc2 	bl	8000170 <delay>
		GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80001ec:	e7f8      	b.n	80001e0 <main+0x48>
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000
 80001f4:	40010000 	.word	0x40010000
 80001f8:	40010c00 	.word	0x40010c00

080001fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x6>)
  ldr r1, =_edata
 8000202:	490e      	ldr	r1, [pc, #56]	; (800023c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000204:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <LoopForever+0xe>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000208:	e002      	b.n	8000210 <LoopCopyDataInit>

0800020a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800020c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020e:	3304      	adds	r3, #4

08000210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000214:	d3f9      	bcc.n	800020a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000218:	4c0b      	ldr	r4, [pc, #44]	; (8000248 <LoopForever+0x16>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800021c:	e001      	b.n	8000222 <LoopFillZerobss>

0800021e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000220:	3204      	adds	r2, #4

08000222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000224:	d3fb      	bcc.n	800021e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000226:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800022a:	f000 f921 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022e:	f7ff ffb3 	bl	8000198 <main>

08000232 <LoopForever>:

LoopForever:
    b LoopForever
 8000232:	e7fe      	b.n	8000232 <LoopForever>
  ldr   r0, =_estack
 8000234:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800023c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000240:	080004d8 	.word	0x080004d8
  ldr r2, =_sbss
 8000244:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000248:	2000001c 	.word	0x2000001c

0800024c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800024c:	e7fe      	b.n	800024c <ADC1_2_IRQHandler>
	...

08000250 <GPIO_PeriClockControl>:
#include "stm32f103xx.h"
#include "drv_gpio.h"


/* Control Peripheral clock */
void GPIO_PeriClockControl(GPIO_RegDef_t *pPort, uint8_t isEnabled) {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	70fb      	strb	r3, [r7, #3]
	if (isEnabled == TRUE) {
 800025c:	78fb      	ldrb	r3, [r7, #3]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d135      	bne.n	80002ce <GPIO_PeriClockControl+0x7e>
		if (pPort == GPIOA) {
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a1c      	ldr	r2, [pc, #112]	; (80002d8 <GPIO_PeriClockControl+0x88>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800026a:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 8000270:	f043 0304 	orr.w	r3, r3, #4
 8000274:	6193      	str	r3, [r2, #24]
			GPIOE_PCLK_EN();
		}
	} else {
		// Do nothing
	}
}
 8000276:	e02a      	b.n	80002ce <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOB) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <GPIO_PeriClockControl+0x90>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a15      	ldr	r2, [pc, #84]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 8000286:	f043 0308 	orr.w	r3, r3, #8
 800028a:	6193      	str	r3, [r2, #24]
}
 800028c:	e01f      	b.n	80002ce <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOC) {
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a14      	ldr	r2, [pc, #80]	; (80002e4 <GPIO_PeriClockControl+0x94>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a10      	ldr	r2, [pc, #64]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 800029c:	f043 0310 	orr.w	r3, r3, #16
 80002a0:	6193      	str	r3, [r2, #24]
}
 80002a2:	e014      	b.n	80002ce <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOD) {
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a10      	ldr	r2, [pc, #64]	; (80002e8 <GPIO_PeriClockControl+0x98>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 80002b2:	f043 0320 	orr.w	r3, r3, #32
 80002b6:	6193      	str	r3, [r2, #24]
}
 80002b8:	e009      	b.n	80002ce <GPIO_PeriClockControl+0x7e>
		} else if (pPort == GPIOE) {
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <GPIO_PeriClockControl+0x9c>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d105      	bne.n	80002ce <GPIO_PeriClockControl+0x7e>
			GPIOE_PCLK_EN();
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <GPIO_PeriClockControl+0x8c>)
 80002c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002cc:	6193      	str	r3, [r2, #24]
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40010800 	.word	0x40010800
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	40011000 	.word	0x40011000
 80002e8:	40011400 	.word	0x40011400
 80002ec:	40011800 	.word	0x40011800

080002f0 <GPIO_Init>:

/* Initialization and Deinitialization Pin */
void GPIO_Init(GPIO_Handle_t *pPortHandle) {
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

	// Configure mode, speed, output type and interrupt for pin
	uint32_t temp = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
	uint8_t temp1 = pPortHandle->pinConfig.pinNumber / 8;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	08db      	lsrs	r3, r3, #3
 8000302:	72fb      	strb	r3, [r7, #11]
	uint8_t temp2 = pPortHandle->pinConfig.pinNumber % 8;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	f003 0307 	and.w	r3, r3, #7
 800030c:	72bb      	strb	r3, [r7, #10]
	if (pPortHandle->pinConfig.pinMode <= MODE_ALT_OPENDR) {	// not using interrupt
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	795b      	ldrb	r3, [r3, #5]
 8000312:	2b07      	cmp	r3, #7
 8000314:	d859      	bhi.n	80003ca <GPIO_Init+0xda>
		if (pPortHandle->pinConfig.pinMode <= MODE_INPUT_PUPDR) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	795b      	ldrb	r3, [r3, #5]
 800031a:	2b02      	cmp	r3, #2
 800031c:	d821      	bhi.n	8000362 <GPIO_Init+0x72>
			// default choose input and analog mode function

			//choose analog mode or floating input or pull-up/pull down
			temp = pPortHandle->pGPIO->CR[temp1];
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	7afa      	ldrb	r2, [r7, #11]
 8000324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000328:	60fb      	str	r3, [r7, #12]
			temp &= ~(MASK_BIT2_3 << (4 * temp2));
 800032a:	7abb      	ldrb	r3, [r7, #10]
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	220c      	movs	r2, #12
 8000330:	fa02 f303 	lsl.w	r3, r2, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	461a      	mov	r2, r3
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	4013      	ands	r3, r2
 800033c:	60fb      	str	r3, [r7, #12]
			temp |= pPortHandle->pinConfig.pinMode << (4 * temp2);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	795b      	ldrb	r3, [r3, #5]
 8000342:	461a      	mov	r2, r3
 8000344:	7abb      	ldrb	r3, [r7, #10]
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	fa02 f303 	lsl.w	r3, r2, r3
 800034c:	461a      	mov	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4313      	orrs	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
			pPortHandle->pGPIO->CR[temp1] = temp;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	7afa      	ldrb	r2, [r7, #11]
 800035a:	68f9      	ldr	r1, [r7, #12]
 800035c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000360:	e033      	b.n	80003ca <GPIO_Init+0xda>
			//pPortHandle->pGPIO->CR[temp1] |= pPortHandle->pinConfig.pinMode << (4 * temp2);
		} else {
			// choose output and alternative function mode
			// At the same time, choose speed output
			pPortHandle->pGPIO->CR[temp1] |= pPortHandle->pinConfig.pinSpeed << (4 * temp2);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	7afa      	ldrb	r2, [r7, #11]
 8000368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	799b      	ldrb	r3, [r3, #6]
 8000370:	461a      	mov	r2, r3
 8000372:	7abb      	ldrb	r3, [r7, #10]
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	4618      	mov	r0, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	7afa      	ldrb	r2, [r7, #11]
 8000382:	4301      	orrs	r1, r0
 8000384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			// choose alternative or output mode with open-drain/push pull capacity
			temp = pPortHandle->pGPIO->CR[temp1];
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	7afa      	ldrb	r2, [r7, #11]
 800038e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000392:	60fb      	str	r3, [r7, #12]
			temp &= ~(MASK_BIT2_3 << (4 * temp2));
 8000394:	7abb      	ldrb	r3, [r7, #10]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	220c      	movs	r2, #12
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	43db      	mvns	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4013      	ands	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]
			temp |= ((pPortHandle->pinConfig.pinMode - 4) << (4 * temp2));
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	1f1a      	subs	r2, r3, #4
 80003ae:	7abb      	ldrb	r3, [r7, #10]
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	fa02 f303 	lsl.w	r3, r2, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	4313      	orrs	r3, r2
 80003bc:	60fb      	str	r3, [r7, #12]
			pPortHandle->pGPIO->CR[temp1] = temp;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	7afa      	ldrb	r2, [r7, #11]
 80003c4:	68f9      	ldr	r1, [r7, #12]
 80003c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {	// using interrupt

	}

	// configure the pull/pull down resistor
	temp = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
	if (pPortHandle->pinConfig.pinMode != MODE_INPUT_FLOAT) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	795b      	ldrb	r3, [r3, #5]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d00e      	beq.n	80003f4 <GPIO_Init+0x104>
		pPortHandle->pGPIO->ODR |= (pPortHandle->pinConfig.pinResType << pPortHandle->pinConfig.pinNumber);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	79db      	ldrb	r3, [r3, #7]
 80003e0:	4619      	mov	r1, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	4619      	mov	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	60da      	str	r2, [r3, #12]
	}
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <GPIO_WritePin>:
	uint16_t value;
	value = (uint16_t)(pPort->IDR);
	return value;
}

void GPIO_WritePin(GPIO_RegDef_t *pPort, uint8_t pinNum, uint8_t value) {
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	460b      	mov	r3, r1
 8000408:	70fb      	strb	r3, [r7, #3]
 800040a:	4613      	mov	r3, r2
 800040c:	70bb      	strb	r3, [r7, #2]
	if (value == HIGH) {
 800040e:	78bb      	ldrb	r3, [r7, #2]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d109      	bne.n	8000428 <GPIO_WritePin+0x2a>
		pPort->ODR |= (value << pinNum);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	78b9      	ldrb	r1, [r7, #2]
 800041a:	78fa      	ldrb	r2, [r7, #3]
 800041c:	fa01 f202 	lsl.w	r2, r1, r2
 8000420:	431a      	orrs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	60da      	str	r2, [r3, #12]
	} else {
		pPort->ODR &= ~(value << pinNum);
	}
}
 8000426:	e009      	b.n	800043c <GPIO_WritePin+0x3e>
		pPort->ODR &= ~(value << pinNum);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	78b9      	ldrb	r1, [r7, #2]
 800042e:	78fa      	ldrb	r2, [r7, #3]
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	43d2      	mvns	r2, r2
 8000436:	401a      	ands	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	60da      	str	r2, [r3, #12]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <GPIO_TogglePin>:

void GPIO_WritePort(GPIO_RegDef_t *pPort, uint16_t value) {
	pPort->ODR = value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pPort, uint8_t pinNum) {
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	460b      	mov	r3, r1
 8000450:	70fb      	strb	r3, [r7, #3]
	pPort->ODR ^= (1 << pinNum);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	78fa      	ldrb	r2, [r7, #3]
 8000458:	2101      	movs	r1, #1
 800045a:	fa01 f202 	lsl.w	r2, r1, r2
 800045e:	405a      	eors	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60da      	str	r2, [r3, #12]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
	...

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2500      	movs	r5, #0
 8000474:	4e0c      	ldr	r6, [pc, #48]	; (80004a8 <__libc_init_array+0x38>)
 8000476:	4c0d      	ldr	r4, [pc, #52]	; (80004ac <__libc_init_array+0x3c>)
 8000478:	1ba4      	subs	r4, r4, r6
 800047a:	10a4      	asrs	r4, r4, #2
 800047c:	42a5      	cmp	r5, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	f000 f81a 	bl	80004b8 <_init>
 8000484:	2500      	movs	r5, #0
 8000486:	4e0a      	ldr	r6, [pc, #40]	; (80004b0 <__libc_init_array+0x40>)
 8000488:	4c0a      	ldr	r4, [pc, #40]	; (80004b4 <__libc_init_array+0x44>)
 800048a:	1ba4      	subs	r4, r4, r6
 800048c:	10a4      	asrs	r4, r4, #2
 800048e:	42a5      	cmp	r5, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000498:	4798      	blx	r3
 800049a:	3501      	adds	r5, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004a2:	4798      	blx	r3
 80004a4:	3501      	adds	r5, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	080004d0 	.word	0x080004d0
 80004ac:	080004d0 	.word	0x080004d0
 80004b0:	080004d0 	.word	0x080004d0
 80004b4:	080004d4 	.word	0x080004d4

080004b8 <_init>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr

080004c4 <_fini>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr
